apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  labels: &Labels
    k8s-app: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: prometheus
  namespace: monitoring
spec:
  serviceName: "prometheus"
  replicas: 1
  podManagementPolicy: "Parallel"
  updateStrategy:
    type: "RollingUpdate"
  selector:
    matchLabels: *Labels
  template:
    metadata:
      labels: *Labels
    spec:
      serviceAccountName: default
      # `chown` the Prometheus  `/data` directory so that Prometheus can write to it
      initContainers:
      - name: "init-chown-data"
        image: infra-harbor-paas.attmx-ne.local/matrixx_lab01/debian:9
        imagePullPolicy: Always
        command: ["chown", "-R", "65534:65534", "/data"]
        volumeMounts:
        - name: prometheus
          mountPath: /data
          subPath: ""
      containers:
        - name: prometheus-server
          # Use the `quay.io/prometheus/prometheus:v2.11.1` image
          image: infra-harbor-paas.attmx-ne.local/matrixx_lab01/quay.io/prometheus/prometheus:v2.15.2
          imagePullPolicy: "IfNotPresent"
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/data
            - --storage.tsdb.retention.time=30d
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          # Probe the `/-/ready` and `/-/healthy` endpoints
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          # Based on 10 running nodes with 30 pods each
          # Resource requests of `200m` of CPU and `1000Mi` of memory
          resources:
            requests:
              cpu: 500m
              memory: 2000Mi
            limits:
              memory: 2000Mi
          volumeMounts:
          - name: prometheus
            mountPath: /data
            subPath: ""
          - mountPath: /etc/prometheus
            name: config-volume
      imagePullSecrets:
      - name: regcred
      terminationGracePeriodSeconds: 300
      volumes:
        # The Prometheus ConfigMap is mounted into the Pods as a volume at `/etc/config`
        - name: config-volume
          configMap:
            name: prometheus-config
      # Configures Pod anti-affinity so that Prometheus Pods are assigned to different Nodes. 
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - prometheus
            topologyKey: "kubernetes.io/hostname"
  # A `volumeClaimTemplate` of `16Gi` of Block Storage is configured and used for Prometheus data storage, mounted at `/data/`
  volumeClaimTemplates:
  - metadata:
      name: prometheus
      labels: *Labels
    spec:
      storageClassName: pks-storage
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "100Gi"
