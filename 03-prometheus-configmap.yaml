apiVersion: v1
data:
  prometheus.yml: |
    # A scrape configuration for running Prometheus on a Kubernetes cluster.
    # This uses separate scrape configs for cluster components (i.e. API server, node)
    # and services to allow each to use different authentication configs.
    #
    # Kubernetes labels will be added as Prometheus labels on metrics via the
    # `labelmap` relabeling action.
    #
    # If you are using Kubernetes 1.7.2 or earlier, please take note of the comments
    # for the kubernetes-cadvisor job; you will need to edit or remove this job.

    # Scrape config for API servers.
    #
    # Kubernetes exposes API servers as endpoints to the default/kubernetes
    # service so this uses `endpoints` role and uses relabelling to only keep
    # the endpoints associated with the default/kubernetes service using the
    # default named port `https`. This works for single API server deployments as
    # well as HA API server deployments.
    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
        - "alert_rules.yml"

    scrape_configs:
    # - job_name: 'federate'
    #   scrape_interval: 3s

    #   honor_labels: true
    #   metrics_path: '/federate'

    #   params:
    #     'match[]':
    #       - '{job="matrixx_mib"}'
    #       - '{job="matrixx_common_mib"}'
    #       - '{job="matrixx_sysinfo_mib"}'
    #       - '{job="matrixx_tra_mib"}'
    #       - '{job="matrixx_generalservice_mib"}'

    #   static_configs:
    #     - targets:
    #       - '10.150.152.111:9090'
    #       - '10.150.152.100:9090'

    - job_name: 'node-exporter'
      scrape_interval: 1m
      scrape_timeout: 1m
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: 'node-exporter'
        action: keep

    - job_name: 'SNMP-exporter'
      metrics_path: /metrics
      static_configs:
        - targets: ['snmp-exporter.monitoring.svc.cluster.local:9116']

    - job_name: 'matrixx_mib'
      honor_labels: true
      static_configs:
        - targets:
          - ckpt-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - ckpt-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - proc-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - proc-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - publ-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - publ-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          labels:                           
            subdomain: 'subdomain-3'
      metrics_path: /snmp
      params:
        module: [matrixx_mib]
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: snmp-exporter.monitoring.svc.cluster.local:9116
    
    - job_name: 'matrixx_common_mib'
      honor_labels: true
      static_configs:
        - targets:
          - ckpt-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - ckpt-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - proc-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - proc-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - publ-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - publ-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-proc-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-publ-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-proc-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-publ-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - trart-0.mtx-attm-uat.svc.cluster.local:14700
          - trart-1.mtx-attm-uat.svc.cluster.local:14700
          labels:                           
            subdomain: 'subdomain-3'
      metrics_path: /snmp
      params:
        module: [matrixx_common_mib]
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: snmp-exporter.monitoring.svc.cluster.local:9116

    - job_name: 'matrixx_sysinfo_mib'
      honor_labels: true
      static_configs:
        - targets:
          - ckpt-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - ckpt-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - proc-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - proc-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - publ-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - publ-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-proc-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-publ-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-proc-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-publ-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - trart-0.mtx-attm-uat.svc.cluster.local:14700
          - trart-1.mtx-attm-uat.svc.cluster.local:14700
          labels:                           
            subdomain: 'subdomain-3'
      metrics_path: /snmp
      params:
        module: [matrixx_sysinfo_mib]
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: snmp-exporter.monitoring.svc.cluster.local:9116

    - job_name: 'matrixx_tra_mib'
      honor_labels: true
      static_configs:
        - targets:
          - tralb-proc-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-publ-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-proc-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-publ-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - trart-0.mtx-attm-uat.svc.cluster.local:14700
          - trart-1.mtx-attm-uat.svc.cluster.local:14700
          labels:                           
            subdomain: 'subdomain-3'
      metrics_path: /snmp
      params:
        module: [matrixx_tra_mib]
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: snmp-exporter.monitoring.svc.cluster.local:9116

    - job_name: 'matrixx_generalservice_mib'
      honor_labels: true
      static_configs:
        - targets:
          - ckpt-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - ckpt-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - proc-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - proc-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - publ-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - publ-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-proc-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-publ-s1e1-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-proc-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - tralb-publ-s1e2-0.mtx-attm-uat.svc.cluster.local:14700
          - trart-0.mtx-attm-uat.svc.cluster.local:14700
          - trart-1.mtx-attm-uat.svc.cluster.local:14700
          labels:                           
            subdomain: 'subdomain-3'
      metrics_path: /snmp
      params:
        module: [matrixx_generalservice_mib]
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: snmp-exporter.monitoring.svc.cluster.local:9116

    - job_name: 'kube-state-metrics'
      static_configs:
        - targets: ['kube-state-metrics.monitoring.svc.cluster.local:9092']

    # Scrape config for nodes (kubelet).
    #
    # Rather than connecting directly to the node, the scrape is proxied though the
    # Kubernetes apiserver.  This means it will work if Prometheus is running out of
    # cluster, or can't connect to nodes for some other reason (e.g. because of
    # firewalling).
    - job_name: 'kubernetes-nodes'

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

    # Scrape config for Kubelet cAdvisor.
    #
    # This is required for Kubernetes 1.7.3 and later, where cAdvisor metrics
    # (those whose names begin with 'container_') have been removed from the
    # Kubelet metrics endpoint.  This job scrapes the cAdvisor endpoint to
    # retrieve those metrics.
    #
    # In Kubernetes 1.7.0-1.7.2, these metrics are only exposed on the cAdvisor
    # HTTP endpoint; use "replacement: /api/v1/nodes/${1}:4194/proxy/metrics"
    # in that case (and ensure cAdvisor's HTTP server hasn't been disabled with
    # the --cadvisor-port=0 Kubelet flag).
    #
    # This job is not necessary and should be removed in Kubernetes 1.6 and
    # earlier versions, or it will cause the metrics to be scraped twice.
    - job_name: 'kubernetes-cadvisor'

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

    # Scrape config for service endpoints.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
    # to set this to `https` & most likely set the `tls_config` of the scrape config.
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: If the metrics are exposed on a different port to the
    # service then set this appropriately.
    - job_name: 'kubernetes-service-endpoints'

      kubernetes_sd_configs:
      - role: endpoints

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name

    # Example scrape config for probing services via the Blackbox Exporter.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/probe`: Only probe services that have a value of `true`
    - job_name: 'kubernetes-services'

      metrics_path: /probe
      params:
        module: [http_2xx]

      kubernetes_sd_configs:
      - role: service

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
        action: keep
        regex: true
      - source_labels: [__address__]
        target_label: __param_target
      - target_label: __address__
        replacement: blackbox-exporter.example.com:9115
      - source_labels: [__param_target]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        target_label: kubernetes_name

    # Example scrape config for probing ingresses via the Blackbox Exporter.
    #
    # The relabeling allows the actual ingress scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/probe`: Only probe services that have a value of `true`
    - job_name: 'kubernetes-ingresses'

      metrics_path: /probe
      params:
        module: [http_2xx]

      kubernetes_sd_configs:
        - role: ingress

      relabel_configs:
        - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]
          regex: (.+);(.+);(.+)
          replacement: ${1}://${2}${3}
          target_label: __param_target
        - target_label: __address__
          replacement: blackbox-exporter.example.com:9115
        - source_labels: [__param_target]
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_ingress_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_ingress_name]
          target_label: kubernetes_name

    # Example scrape config for pods
    #
    # The relabeling allows the actual pod scrape endpoint to be configured via the
    # following annotations:
    #
    # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the
    # pod's declared ports (default is a port-free target if none are declared).
    - job_name: 'kubernetes-pods'

      scrape_interval: 1m
      scrape_timeout: 1m

      kubernetes_sd_configs:
      - role: pod

      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
  alert_rules.yml: |
    groups:
      - name: kubernetes.rules
        rules:
        - alert: KubernetesNodeReady
          expr: kube_node_status_condition{condition="Ready",status="true"} == 0
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "Kubernetes Node ready (instance {{ $labels.instance }})"
            description: "Node {{ $labels.node }} has been unready for a long time\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: KubernetesPersistentvolumeclaimPending
          expr: kube_persistentvolumeclaim_status_phase{phase="Pending"} == 1
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Kubernetes PersistentVolumeClaim pending (instance {{ $labels.instance }})"
            description: "PersistentVolumeClaim {{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }} is pending\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"      
        - alert: KubernetesJobFailed
          expr: kube_job_status_failed > 0
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Kubernetes Job failed (instance {{ $labels.instance }})"
            description: "Job {{$labels.namespace}}/{{$labels.exported_job}} failed to complete\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: KubernetesCronjobSuspended
          expr: kube_cronjob_spec_suspend != 0
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Kubernetes CronJob suspended (instance {{ $labels.instance }})"
            description: "CronJob {{ $labels.namespace }}/{{ $labels.cronjob }} is suspended\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: KubernetesVolumeFullInFourDays
          expr: predict_linear(kubelet_volume_stats_available_bytes[6h], 4 * 24 * 3600) < 0
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "Kubernetes Volume full in four days (instance {{ $labels.instance }})"
            description: "{{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }} is expected to fill up within four days. Currently {{ $value | humanize }}% is available.\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: KubernetesPersistentvolumeError
          expr: kube_persistentvolume_status_phase{phase=~"Failed|Pending",job="kube-state-metrics"} > 0
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "Kubernetes PersistentVolume error (instance {{ $labels.instance }})"
            description: "Persistent volume is in bad state\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: KubernetesHpaScaleCapability
          expr: kube_hpa_status_desired_replicas >= kube_hpa_spec_max_replicas
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Kubernetes HPA scale capability (instance {{ $labels.instance }})"
            description: "The maximum number of desired Pods has been hit\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: KubernetesPodNotHealthy
          expr: min_over_time(sum by (namespace, pod) (kube_pod_status_phase{phase=~"Pending|Unknown|Failed"})[1h:])
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "Kubernetes Pod not healthy (instance {{ $labels.instance }})"
            description: "Pod has been in a non-ready state for longer than an hour.\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: KubernetesPodCrashLooping
          expr: rate(kube_pod_container_status_restarts_total[15m]) * 60 * 5 > 5
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Kubernetes pod crash looping (instance {{ $labels.instance }})"
            description: "Pod {{ $labels.pod }} is crash looping\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: KubernetesStatefulsetDown
          expr: (kube_statefulset_status_replicas_ready / kube_statefulset_status_replicas_current) != 1
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "Kubernetes StatefulSet down (instance {{ $labels.instance }})"
            description: "A StatefulSet went down"
        - alert: KubernetesMemoryPressure
          expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "Kubernetes memory pressure (instance {{ $labels.instance }})"
            description: "{{ $labels.node }} has MemoryPressure condition"
        - alert: KubernetesDiskPressure
          expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "Kubernetes disk pressure (instance {{ $labels.instance }})"
            description: "{{ $labels.node }} has DiskPressure condition"
      - name: mongoDB.rules
        rules:
        - alert: MongodbNumberCursorsOpen
          expr: mongodb_metrics_cursor_open{state="total_open"} > 10000
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "MongoDB number cursors open (instance {{ $labels.instance }})"
            description: "Too many cursors opened by MongoDB for clients (> 10k)\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: MongodbCursorsTimeouts
          expr: increase(mongodb_metrics_cursor_timed_out_total[10m]) > 100
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "MongoDB cursors timeouts (instance {{ $labels.instance }})"
            description: "Too many cursors are timing out\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: MongodbTooManyConnections
          expr: mongodb_connections{state="current"} > 500
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "MongoDB too many connections (instance {{ $labels.instance }})"
            description: "Too many connections\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: MongodbVirtualMemoryUsage
          expr: (sum(mongodb_memory{type="virtual"}) BY (ip) / sum(mongodb_memory{type="mapped"}) BY (ip)) > 3
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "MongoDB virtual memory usage (instance {{ $labels.instance }})"
            description: "High memory usage\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: MongodbReplicationLag
          expr: avg(mongodb_replset_member_optime_date{state="PRIMARY"}) - avg(mongodb_replset_member_optime_date{state="SECONDARY"}) > 10
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "MongoDB replication lag (instance {{ $labels.instance }})"
            description: "Mongodb replication lag is more than 10s\n VALUE = {{ $value }}\n LABELS: {{ $labels }}"
        - alert: MongodbReplicationHeadroom
          expr: (avg(mongodb_replset_oplog_tail_timestamp - mongodb_replset_oplog_head_timestamp) - (avg(mongodb_replset_member_optime_date{state="PRIMARY"}) - avg(mongodb_replset_member_optime_date{state="SECONDARY"}))) <= 0
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "MongoDB replication headroom (instance {{ $labels.instance }})"
            description: "MongoDB replication headroom is <= 0\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: MongodbReplicationStatus3
          expr: mongodb_replset_member_state == 3
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "MongoDB replication Status 3 (instance {{ $labels.instance }})"
            description: "MongoDB Replication set member either perform startup self-checks, or transition from completing a rollback or resync"
        - alert: MongodbReplicationStatus6
          expr: mongodb_replset_member_state == 6
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "MongoDB replication Status 6 (instance {{ $labels.instance }})"
            description: "MongoDB Replication set member either perform startup self-checks, or transition from completing a rollback or resync"
        - alert: MongodbReplicationStatus8
          expr: mongodb_replset_member_state == 8
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "MongoDB replication Status 8 (instance {{ $labels.instance }})"
            description: "MongoDB Replication set member either perform startup self-checks, or transition from completing a rollback or resync"
        - alert: MongodbReplicationStatus9
          expr: mongodb_replset_member_state == 9
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "MongoDB replication Status 9 (instance {{ $labels.instance }})"
            description: "MongoDB Replication set member either perform startup self-checks, or transition from completing a rollback or resync"
        - alert: MongodbReplicationStatus10
          expr: mongodb_replset_member_state == 10
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "MongoDB replication Status 10 (instance {{ $labels.instance }})"
            description: "MongoDB Replication set member either perform startup self-checks, or transition from completing a rollback or resync"
      - name: minio.rules
        rules:
        - alert: MinioDiskOffline
          expr: minio_offline_disks > 0
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "Minio disk offline (instance {{ $labels.instance }})"
            description: "Minio disk is offline\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: MinioStorageSpaceExhausted
          expr: minio_disk_storage_free_bytes / 1024 / 1024 / 1024 < 10
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Minio storage space exhausted (instance {{ $labels.instance }})"
            description: "Minio storage space is low (< 10 GB)\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
      - name: kafka.rules
        rules:
        - alert: KafkaTopicsReplicas
          expr: sum(kafka_topic_partition_in_sync_replica) by (topic) < 3
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "Kafka topics replicas (instance {{ $labels.instance }})"
            description: "Kafka topic in-sync partition\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
        - alert: KafkaConsumersGroup
          expr: sum(kafka_consumergroup_lag) by (consumergroup) > 50
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "Kafka consumers group (instance {{ $labels.instance }})"
            description: "Kafka consumers group\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
      - name: matrixxx.rules
        rules:
        - alert: sysAgentShutDown
          expr: sum(sysAgentShutdown) != 0
          for: 5m
          labels:
            severity: major
          annotations:
            summary: "SNMP Agent is shutting down (instance {{ $labels.instance }})"
            description: "SNMP Agent has gone into shutting down status"
        - alert: sysAgentStart
          expr: sum(sysAgentStart) != 0
          for: 5m
          labels:
            severity: major
          annotations:
            summary: "SNMP Agent went to shutdown and start status (instance {{ $labels.instance }})"
            description: "SNMP Agent is in start status"
        - alert: sysServiceRestart
          expr: sum(sysServiceRestart) != 0
          for: 5m
          labels:
            severity: major
          annotations:
            summary: "SNMP Agent went has been restarted(instance {{ $labels.instance }})"
            description: "SNMP Agent has been restarted"
        - alert: sysServiceReboot
          expr: sum(sysServiceReboot) != 0
          for: 5m
          labels:
            severity: major
          annotations:
            summary: "SNMP Agent services has been rebooted(instance {{ $labels.instance }})"
            description: "SNMP Agent service has been rebooted"
        - alert: sysServerReboot
          expr: sum(sysServerReboot) != 0
          for: 5m
          labels:
            severity: major
          annotations:
            summary: "SNMP server rebooted(instance {{ $labels.instance }})"
            description: "SNMP server has been rebooted"
        - alert: sysServiceDown
          expr: sum(sysServiceDown) != 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Critical System Service has shutdown(instance {{ $labels.instance }})"
            description: "Critical System Service has shutdown status"
        - alert: sysProcessingErrorAlert
          expr: sum(sysProcessingErrorAlert) != 0
          for: 5m
          labels:
            severity: minor
          annotations:
            summary: "Processing error has ocurred(instance {{ $labels.instance }})"
            description: "Processing error has ocurred"
        - alert: sysThresholdCrossingAlert
          expr: sum(sysThresholdCrossingAlert) != 0
          for: 5m
          labels:
            severity: major
          annotations:
            summary: "Maximum response time reached(instance {{ $labels.instance }})"
            description: "Maximum response time reached"
        - alert: sysClusterNodeExited
          expr: sum(sysClusterNodeExited) != 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Node has exited the cluster(instance {{ $labels.instance }})"
            description: "Node has exited the cluster"
        - alert: sysClusterNodeJoined
          expr: sum(sysClusterNodeJoined) != 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Node has joined the cluster(instance {{ $labels.instance }})"
            description: "Node has joined the cluster"
        - alert: sysClusterNodeServiceDown
          expr: sum(sysClusterNodeServiceDown) != 0
          for: 5m
          labels:
            severity: major
          annotations:
            summary: "Cluster memeber not processing requests (instance {{ $labels.instance }})"
            description: "Cluster memeber not processing requests"
        - alert: sysClusterNodeServiceUp
          expr: sum(sysClusterNodeServiceUp) != 0
          for: 5m
          labels:
            severity: major
          annotations:
            summary: "Cluster memeber ready to process service requests (instance {{ $labels.instance }})"
            description: "Cluster memeber ready to process service requests"
        - alert: sysClusterPeerActiveError
          expr: sum(sysClusterPeerActiveError) != 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Primary and Seconday clusters are both active (instance {{ $labels.instance }})"
            description: "Primary and Seconday clusters are both active"
        - alert: sysClusterPeerDisconnected
          expr: sum(sysClusterPeerDisconnected) != 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Peer cluster has become disconnected (instance {{ $labels.instance }})"
            description: "Peer cluster has become disconnected"
        - alert: sysClusterPeerConnected
          expr: sum(sysClusterPeerConnected) != 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Peer cluster has connected (instance {{ $labels.instance }})"
            description: "Peer cluster has connected"
        - alert: sysClusterHaStateChange
          expr: sum(sysClusterHaStateChange) != 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "H/A state has changed (instance {{ $labels.instance }})"
            description: "Sent when the H/A state of a cluster has changed"
        - alert: sysClusterHaPeerActiveStateConflict
          expr: sum(sysClusterHaPeerActiveStateConflict) != 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "both peer clusters are in HA ACTIVE state(instance {{ $labels.instance }})"
            description: "Sent when both peer clusters are in the H/A ACTIVE state, and a split-brain situation has occurred"
        - alert: sysClusterHaPeerClusterIdReplayConflict
          expr: sum(sysClusterHaPeerClusterIdReplayConflict) != 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Two Stanby clusters hace same transaction replay source(instance {{ $labels.instance }})"
            description: "Sent when two H/A STANDBY clusters have same transaction replay source"
        - alert: sysMemoryAvailableThresholdMb
          expr: sum(sysMemoryAvailableThresholdMb) < 50
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Sent when the minimum available memory reached in MB {{ $labels.instance }})"
            description: "Sent when the minimum available memory reached in MB."
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
