#Author: OCC
#Date: 10112020
#Description: 
#Name spaces has been updated from attmdev to attx-attm-dev
#this was because MATRIXX has perform an upgrade to version 5201


apiVersion: v1
data:
  prometheus.yml: |
    # A scrape configuration for running Prometheus on a Kubernetes cluster.
    # This uses separate scrape configs for cluster components (i.e. API server, node)
    # and services to allow each to use different authentication configs.
    #
    # Kubernetes labels will be added as Prometheus labels on metrics via the
    # `labelmap` relabeling action.
    #
    # If you are using Kubernetes 1.7.2 or earlier, please take note of the comments
    # for the kubernetes-cadvisor job; you will need to edit or remove this job.

    # Scrape config for API servers.
    #
    # Kubernetes exposes API servers as endpoints to the default/kubernetes
    # service so this uses `endpoints` role and uses relabelling to only keep
    # the endpoints associated with the default/kubernetes service using the
    # default named port `https`. This works for single API server deployments as
    # well as HA API server deployments.
    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
        - "alert_rules.yml"

    scrape_configs:
    - job_name: 'node-exporter'
      scrape_interval: 1m
      scrape_timeout: 1m
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: 'node-exporter'
        action: keep

    - job_name: 'matrixx_mib'
      honor_labels: true
      static_configs:
        - targets:
          - ckpt-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - ckpt-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - proc-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - proc-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - publ-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - publ-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          labels:                           
            subdomain: 'subdomain-1'
      metrics_path: /snmp
      params:
        module: [matrixx_mib]
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: snmp-exporter.monitoring.svc.cluster.local:9116
    
    - job_name: 'matrixx_common_mib'
      honor_labels: true
      static_configs:
        - targets:
          - ckpt-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - ckpt-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - proc-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - proc-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - publ-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - publ-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - tralb-proc-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - tralb-proc-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - tralb-publ-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - tralb-publ-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          #- trart-0.mtx-attm-dev.svc.cluster.local:14700
          #- trart-1.mtx-attm-dev.svc.cluster.local:14700
          - tra-rt-ag1-0.mtx-attm-dev.svc.cluster.local:14700
          - tra-rt-ag1-1.mtx-attm-dev.svc.cluster.local:14700
          labels:                           
            subdomain: 'subdomain-1'
      metrics_path: /snmp
      params:
        module: [matrixx_common_mib]
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: snmp-exporter.monitoring.svc.cluster.local:9116

    - job_name: 'matrixx_sysinfo_mib'
      honor_labels: true
      static_configs:
        - targets:
          - ckpt-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - ckpt-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - proc-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - proc-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - publ-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - publ-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - tralb-proc-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - tralb-proc-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - tralb-publ-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - tralb-publ-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          #- trart-0.mtx-attm-dev.svc.cluster.local:14700
          #- trart-1.mtx-attm-dev.svc.cluster.local:14700
          - tra-rt-ag1-0.mtx-attm-dev.svc.cluster.local:14700
          - tra-rt-ag1-1.mtx-attm-dev.svc.cluster.local:14700
          labels:                           
            subdomain: 'subdomain-1'
      metrics_path: /snmp
      params:
        module: [matrixx_sysinfo_mib]
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: snmp-exporter.monitoring.svc.cluster.local:9116

    - job_name: 'matrixx_tra_mib'
      honor_labels: true
      static_configs:
        - targets:
          - tralb-proc-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - tralb-publ-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - tralb-proc-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - tralb-publ-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          #- trart-0.mtx-attm-dev.svc.cluster.local:14700
          #- trart-1.mtx-attm-dev.svc.cluster.local:14700
          - tra-rt-ag1-0.mtx-attm-dev.svc.cluster.local:14700
          - tra-rt-ag1-1.mtx-attm-dev.svc.cluster.local:14700
          labels:                           
            subdomain: 'subdomain-1'
      metrics_path: /snmp
      params:
        module: [matrixx_tra_mib]
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: snmp-exporter.monitoring.svc.cluster.local:9116

    - job_name: 'matrixx_generalservice_mib'
      honor_labels: true
      static_configs:
        - targets:
          - ckpt-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - ckpt-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - proc-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - proc-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - publ-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - publ-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - tralb-proc-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - tralb-proc-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          - tralb-publ-s1e1.mtx-attm-dev.svc.cluster.local:14700
          - tralb-publ-s1e1-0.mtx-attm-dev.svc.cluster.local:14700
          #- trart-0.mtx-attm-dev.svc.cluster.local:14700
          #- trart-1.mtx-attm-dev.svc.cluster.local:14700
          - tra-rt-ag1-0.mtx-attm-dev.svc.cluster.local:14700
          - tra-rt-ag1-1.mtx-attm-dev.svc.cluster.local:14700
          labels:                           
            subdomain: 'subdomain-1'
      metrics_path: /snmp
      params:
        module: [matrixx_generalservice_mib]
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: snmp-exporter.monitoring.svc.cluster.local:9116

    - job_name: 'kube-state-metrics'
      static_configs:
        - targets: ['kube-state-metrics.monitoring.svc.cluster.local:9092']

    - job_name: 'activemq'
      static_configs:
        - targets: ['activemq-1.mtx-attm-dev.svc.cluster.local:8080']
      metrics_path: /metrics

    - job_name: 'rsgateway'
      static_configs:
        - targets: ['rsgateway-ag1.mtx-attm-dev.svc.cluster.local:8080']
      metrics_path: /rsgateway/actuator/prometheus


    # Scrape config for nodes (kubelet).
    #
    # Rather than connecting directly to the node, the scrape is proxied though the
    # Kubernetes apiserver.  This means it will work if Prometheus is running out of
    # cluster, or can't connect to nodes for some other reason (e.g. because of
    # firewalling).
    - job_name: 'kubernetes-nodes'

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

    # Scrape config for Kubelet cAdvisor.
    #
    # This is required for Kubernetes 1.7.3 and later, where cAdvisor metrics
    # (those whose names begin with 'container_') have been removed from the
    # Kubelet metrics endpoint.  This job scrapes the cAdvisor endpoint to
    # retrieve those metrics.
    #
    # In Kubernetes 1.7.0-1.7.2, these metrics are only exposed on the cAdvisor
    # HTTP endpoint; use "replacement: /api/v1/nodes/${1}:4194/proxy/metrics"
    # in that case (and ensure cAdvisor's HTTP server hasn't been disabled with
    # the --cadvisor-port=0 Kubelet flag).
    #
    # This job is not necessary and should be removed in Kubernetes 1.6 and
    # earlier versions, or it will cause the metrics to be scraped twice.
    - job_name: 'kubernetes-cadvisor'

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

    # Scrape config for service endpoints.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
    # to set this to `https` & most likely set the `tls_config` of the scrape config.
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: If the metrics are exposed on a different port to the
    # service then set this appropriately.
    - job_name: 'kubernetes-service-endpoints'

      kubernetes_sd_configs:
      - role: endpoints

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name

    # Example scrape config for probing services via the Blackbox Exporter.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/probe`: Only probe services that have a value of `true`
    - job_name: 'kubernetes-services'

      metrics_path: /probe
      params:
        module: [http_2xx]

      kubernetes_sd_configs:
      - role: service

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
        action: keep
        regex: true
      - source_labels: [__address__]
        target_label: __param_target
      - target_label: __address__
        replacement: blackbox-exporter.example.com:9115
      - source_labels: [__param_target]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        target_label: kubernetes_name

    # Example scrape config for probing ingresses via the Blackbox Exporter.
    #
    # The relabeling allows the actual ingress scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/probe`: Only probe services that have a value of `true`
    - job_name: 'kubernetes-ingresses'

      metrics_path: /probe
      params:
        module: [http_2xx]

      kubernetes_sd_configs:
        - role: ingress

      relabel_configs:
        - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]
          regex: (.+);(.+);(.+)
          replacement: ${1}://${2}${3}
          target_label: __param_target
        - target_label: __address__
          replacement: blackbox-exporter.example.com:9115
        - source_labels: [__param_target]
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_ingress_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_ingress_name]
          target_label: kubernetes_name

    # Example scrape config for pods
    #
    # The relabeling allows the actual pod scrape endpoint to be configured via the
    # following annotations:
    #
    # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the
    # pod's declared ports (default is a port-free target if none are declared).
    - job_name: 'kubernetes-pods'

      scrape_interval: 1m
      scrape_timeout: 1m

      kubernetes_sd_configs:
      - role: pod

      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
  alert_rules.yml: |
    groups:
      - name: blades.rules
        rules:
        - alert: ProcessingBladeStatus
          expr: count(sysPeerClusterClusterState{instance=~"proc-.*", job="matrixx_mib"} != 8) or absent(sysPeerClusterClusterState{instance=~"proc-.*", job="matrixx_mib"})
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Engine is down or has an error"
            description: "Engine is down or has an error"
        - alert: ProcessingBladeStatusSites
          expr: sysPeerClusterClusterState{instance=~"proc-.*", job="matrixx_mib", sysPeerClusterEngineId="1"} == 8 and sysPeerClusterClusterState{instance=~"proc-.*", job="matrixx_mib", sysPeerClusterEngineId="2"} == 8
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Both Engines are active"
            description: "Both Engines are active"
        - alert: pricingIMDBUsage
          expr: sum by (job,subdomain)(txnDatabaseMemoryUsedKb{job="matrixx_mib"}) * 100 /(sum by (job,subdomain)(txnDatabaseMemoryUsedKb{job="matrixx_mib"}) + sum by (job,subdomain)(txnDatabaseMemoryFreeKb{job="matrixx_mib"})) > 60
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "In memory DB usage > 70%"
            description: "In memory DB usage > 70% for {{ $labels.subdomain }}"
        - alert: subDomainStatusDown
          expr: count(sysPeerClusterClusterState{instance=~"proc-.*", job="matrixx_mib"} != 8 and sysPeerClusterClusterState{instance=~"proc-.*", job="matrixx_mib"} != 6) or absent(sysPeerClusterClusterState{instance=~"proc-.*", job="matrixx_mib"})
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "{{ $labels.subdomain }} is down"
            description: "{{ $labels.subdomain }} is down, {{ $labels.instance }}"
        - alert: sysClusterNodeNotActive
          expr: sysClusterMemberNodeState != 5
          for: 5m
          labels:
            severity: error
          annotations:
            summary: "Not active node
            description: "Not active node in {{ $labels.instance }}, {{ $labels.subdomain }}"
        - alert: sysClusterPeerActiveError
          expr: sysPeerClusterClusterState{instance=~"proc-.*", sysPeerClusterClusterId="1" , sysPeerClusterEngineId="1"} == 8 and sysPeerClusterClusterState{instance=~"proc-.*", sysPeerClusterClusterId="1" ,sysPeerClusterEngineId="2"} == 8 or sysPeerClusterClusterState{instance=~"proc-.*", sysPeerClusterClusterId="2" , sysPeerClusterEngineId="1"} == 8 and sysPeerClusterClusterState{instance=~"proc-.*", sysPeerClusterClusterId="2" ,sysPeerClusterEngineId="2"} == 8
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Both cluster status is active
            description: "Both cluster status is active {{ $labels.instance }}, {{ $labels.subdomain }}"
        - alert: engineOneStatusAlert
          expr: avg(sysPeerClusterClusterState{instance=~"proc-s1.*", sysPeerClusterClusterId="1",sysPeerClusterEngineId="1"}) != 8 and avg(sysPeerClusterClusterState{instance=~"proc-s1.*", sysPeerClusterClusterId="1",sysPeerClusterEngineId="1"}) != 6
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Engine 1 status is different to active and standBy"
            description: "Engine 1 status is different to active and standBy {{ $labels.instance }}, {{ $labels.subdomain }}"
        - alert: engineTwoStatusAlert
          expr: avg(sysPeerClusterClusterState{instance=~"proc-s1.*", sysPeerClusterClusterId="1",sysPeerClusterEngineId="2"}) != 8 and avg(sysPeerClusterClusterState{instance=~"proc-s1.*", sysPeerClusterClusterId="1",sysPeerClusterEngineId="2"}) != 6
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Engine 2 status is different to active and standBy"
            description: "Engine 2 status is different to active and standBy {{ $labels.instance }}, {{ $labels.subdomain }}"
        - alert: engineTwoStatusAlert
          expr: org_apache_activemq_Broker_Active != 1
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "ActiveMQ status not active"
            description: "ActiveMQ status not active {{ $labels.instance }}, {{ $labels.subdomain }}"
        - alert: rSGCamelEvents
          expr: absent(camel_exchange_event_notifier_seconds_sum)
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "No communication from camel"
            description: "No communication from camel"
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
